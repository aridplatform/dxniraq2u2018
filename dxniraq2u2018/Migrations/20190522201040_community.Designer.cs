// <auto-generated />
using dxniraq2u2018.Data;
using dxniraq2u2018.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace dxniraq2u2018.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190522201040_community")]
    partial class community
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("dxniraq2u2018.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressName")
                        .IsRequired();

                    b.Property<string>("AdminComment")
                        .HasMaxLength(500);

                    b.Property<bool>("AlertMe");

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("CityId");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("GoogleAddress")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVerifiedByAdmin");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("UserComment")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ArName")
                        .HasMaxLength(50);

                    b.Property<decimal>("Balance");

                    b.Property<int>("BranchId");

                    b.Property<int>("CityId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateofBirth");

                    b.Property<string>("DxnId")
                        .HasMaxLength(450);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EnName")
                        .HasMaxLength(50);

                    b.Property<int>("Gender");

                    b.Property<bool>("IsBranchEmployee");

                    b.Property<bool>("IsBranchManager");

                    b.Property<bool>("IsDXNMember");

                    b.Property<bool>("IsDriver");

                    b.Property<bool>("IsInstructor");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("MemberTypeId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Points");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500);

                    b.Property<DateTime>("RegDate");

                    b.Property<string>("SecondEmail")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SponsorId")
                        .HasMaxLength(450);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<bool>("AttendanceType");

                    b.Property<DateTime>("Date");

                    b.Property<string>("IP")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.BlogAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlogPostId");

                    b.Property<string>("Image")
                        .HasMaxLength(450);

                    b.Property<string>("ImageThumb")
                        .HasMaxLength(450);

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.ToTable("BlogAlbum");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlogSectionId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("BlogSectionId");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminUserId")
                        .HasMaxLength(450);

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("BlogCategoryId");

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Filelink")
                        .HasMaxLength(450);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("Imagethumb")
                        .HasMaxLength(450);

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsVisible");

                    b.Property<string>("Meta")
                        .HasMaxLength(450);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.BlogSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("BlogSection");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(450);

                    b.Property<string>("BranchPhoto")
                        .HasMaxLength(100);

                    b.Property<int>("CityId");

                    b.Property<string>("Contact")
                        .HasMaxLength(450);

                    b.Property<string>("GoogleAddress")
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Latitude")
                        .HasMaxLength(10);

                    b.Property<string>("Longitude")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Branchs");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.BranchAdvertismentScreenk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .HasMaxLength(2500);

                    b.Property<DateTime>("PostDate");

                    b.Property<bool>("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(500);

                    b.Property<int>("Timer");

                    b.HasKey("Id");

                    b.ToTable("BranchAdvertismentScreenk");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.CategoryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CategoryProducts");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArCityName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CountryId");

                    b.Property<string>("EnCityName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("BlogPostId");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsAbusedComment");

                    b.Property<bool>("IsVisible");

                    b.Property<string>("UserComment")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BlogPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.CommentMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("PostCommentId");

                    b.Property<int>("ReportType");

                    b.Property<int>("VoteValue");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostCommentId");

                    b.ToTable("CommentMetrics");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("BgImage")
                        .HasMaxLength(100);

                    b.Property<int>("CommunityType");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsCommentsAllowed");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsSuspended");

                    b.Property<string>("Logo")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SecurityLevel");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SpecialityId");

                    b.Property<string>("Tags")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.CommunityFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("CommunityId");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("NotifyMe");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommunityId");

                    b.ToTable("CommunityFollowers");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<int>("FaqCategoryId");

                    b.Property<string>("Meta")
                        .HasMaxLength(450);

                    b.Property<int>("Order");

                    b.Property<string>("Question")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("FaqCategoryId");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.FaqCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FaqCategory");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("Subject")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Gallery");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.GalleryImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GalleryId");

                    b.Property<string>("Subject")
                        .HasMaxLength(450);

                    b.Property<string>("Url")
                        .HasMaxLength(450);

                    b.Property<string>("_thumb")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("GalleryImage");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountantId");

                    b.Property<int>("AddressId");

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("BranchId");

                    b.Property<int>("CustomerSatisfaction");

                    b.Property<DateTime>("DeliveredDate");

                    b.Property<string>("DriverId");

                    b.Property<string>("InvoicePDF")
                        .HasMaxLength(100);

                    b.Property<bool>("IsCalled");

                    b.Property<bool>("IsloggedToDxnSystem");

                    b.Property<DateTime>("IssuingDate");

                    b.Property<DateTime>("PaidDate");

                    b.Property<int>("PaymentMethodId");

                    b.Property<string>("PaymentMethodReference")
                        .HasMaxLength(50);

                    b.Property<bool>("PaymentStatus");

                    b.Property<string>("ReceivedByMobile")
                        .HasMaxLength(200);

                    b.Property<string>("ReceivedByName")
                        .HasMaxLength(300);

                    b.Property<int>("ReceivedByRelationshipId");

                    b.Property<string>("SystemTrackNo")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AccountantId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("DriverId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("DXNId")
                        .HasMaxLength(20);

                    b.Property<int>("InvoiceId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BranchId");

                    b.Property<string>("Content")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Flyer")
                        .HasMaxLength(100);

                    b.Property<string>("InstructorId")
                        .HasMaxLength(450);

                    b.Property<bool>("IsAdminApproved");

                    b.Property<bool>("IsOnline");

                    b.Property<bool>("IsOpen");

                    b.Property<int>("LevelType");

                    b.Property<int>("Seats");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.LectureRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("LectureId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("UserId");

                    b.ToTable("LectureRegistrations");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("FileName")
                        .HasMaxLength(50);

                    b.Property<int>("FileType");

                    b.Property<string>("UrlPath")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.MemberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("NameAr")
                        .HasMaxLength(100);

                    b.Property<string>("NameEng")
                        .HasMaxLength(100);

                    b.Property<string>("TypeAbbreviation")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("MemberTypes");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<string>("EnglishTitleUrl")
                        .HasMaxLength(500);

                    b.Property<bool>("IsVisible");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<string>("MethodName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<int>("CommunityId");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("File")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsCommentsAllowed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsGifted");

                    b.Property<bool>("IsHidden");

                    b.Property<bool>("IsPublishRequest");

                    b.Property<int>("PostType");

                    b.Property<bool>("PublishRequestStatus");

                    b.Property<int>("Reads");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommunityId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("File")
                        .HasMaxLength(100);

                    b.Property<bool>("IsBestAnswer");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsHidden");

                    b.Property<Guid>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.PostMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("DateTime");

                    b.Property<bool>("NotifyMe");

                    b.Property<Guid>("PostId");

                    b.Property<int>("ReportType");

                    b.Property<int>("VoteValue");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("PostMetrics");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.PostRevision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<DateTime>("EditorDateTime");

                    b.Property<string>("EditorUserId")
                        .HasMaxLength(450);

                    b.Property<Guid>("PostId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("EditorUserId");

                    b.HasIndex("PostId");

                    b.ToTable("PostRevisions");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode")
                        .HasMaxLength(50);

                    b.Property<int>("CategoryProductId");

                    b.Property<string>("DescArabic")
                        .HasMaxLength(4000);

                    b.Property<string>("DescEnglish")
                        .HasMaxLength(4000);

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<bool>("IsAvailable");

                    b.Property<decimal>("MemberPrice");

                    b.Property<decimal>("NonMemberPrice");

                    b.Property<int>("PV");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ProductNameArabic")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("ProductNameEnglish")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<decimal>("SV");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CategoryProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.RegisterIntention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RegisterIntention");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("DXNId")
                        .HasMaxLength(20);

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Statement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Destination");

                    b.Property<int>("InvoiceId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.StoreLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BranchId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("StoreLogs");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("TicketCloseDate");

                    b.Property<DateTime>("TicketOpenDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.TicketReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("ReplyDate");

                    b.Property<string>("SupportUserId")
                        .HasMaxLength(450);

                    b.Property<int>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("SupportUserId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketReply");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Tracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InvoiceId");

                    b.Property<int>("ProcessingId");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Trackings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Address", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.ApplicationUser", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dxniraq2u2018.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dxniraq2u2018.Models.MemberType", "MemberType")
                        .WithMany()
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Attendance", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.BlogAlbum", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.BlogPost", "BlogPost")
                        .WithMany()
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.BlogCategory", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.BlogSection", "BlogSection")
                        .WithMany()
                        .HasForeignKey("BlogSectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.BlogPost", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId");

                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.BlogCategory", "BlogCategory")
                        .WithMany()
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Branch", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Comment", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.BlogPost", "BlogPost")
                        .WithMany()
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.CommentMetric", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.PostComment", "PostComment")
                        .WithMany()
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Community", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.CommunityFollower", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Faq", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.FaqCategory", "FaqCategory")
                        .WithMany()
                        .HasForeignKey("FaqCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.FaqCategory", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Gallery", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.GalleryImage", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.Gallery", "Gallery")
                        .WithMany()
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Invoice", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "Accountant")
                        .WithMany()
                        .HasForeignKey("AccountantId");

                    b.HasOne("dxniraq2u2018.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("dxniraq2u2018.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.InvoiceItem", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dxniraq2u2018.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Lecture", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.LectureRegistration", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Library", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Post", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.PostComment", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.PostMetric", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.PostRevision", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "EditorUser")
                        .WithMany()
                        .HasForeignKey("EditorUserId");

                    b.HasOne("dxniraq2u2018.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Product", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.CategoryProduct", "CategoryProduct")
                        .WithMany()
                        .HasForeignKey("CategoryProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.RegisterIntention", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Statement", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("dxniraq2u2018.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.StoreLog", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Ticket", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("dxniraq2u2018.Models.TicketReply", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser", "SupportUser")
                        .WithMany()
                        .HasForeignKey("SupportUserId");

                    b.HasOne("dxniraq2u2018.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dxniraq2u2018.Models.Tracking", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dxniraq2u2018.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dxniraq2u2018.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
